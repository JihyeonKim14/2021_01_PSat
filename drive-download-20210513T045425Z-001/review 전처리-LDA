{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"review 전처리-LDA","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNKzNEQrc9Q12tUheLH1PRl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":95},"id":"5nJ6d1fRdqmF","executionInfo":{"status":"ok","timestamp":1619498142324,"user_tz":-540,"elapsed":11220,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"5af34fd0-829c-4aa7-aa3f-67cb84bd7bea"},"source":["import pandas as pd\n","\n","from google.colab import files\n","uploaded = files.upload()"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-0b175aa6-c9be-467e-91fe-e313759c83ac\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0b175aa6-c9be-467e-91fe-e313759c83ac\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving 지현(801_1000).xlsx to 지현(801_1000) (1).xlsx\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":536},"id":"jowrAgSoeWFy","executionInfo":{"status":"error","timestamp":1619498144035,"user_tz":-540,"elapsed":916,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"6abaac8d-4fcc-4839-ad8f-e4f0b2f83eec"},"source":["data = pd.read_excel('지현(801_1000).xlsx')\n","data.info()\n"],"execution_count":2,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-8fc8c1041469>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_excel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'지현(801_1000).xlsx'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    297\u001b[0m                 )\n\u001b[1;32m    298\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFutureWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 299\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36mread_excel\u001b[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, mangle_dupe_cols, storage_options)\u001b[0m\n\u001b[1;32m    334\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0mshould_close\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m         \u001b[0mio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m         raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path_or_buffer, engine, storage_options)\u001b[0m\n\u001b[1;32m   1129\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstorage_options\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1130\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1131\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engines\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__fspath__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_openpyxl.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer, storage_options)\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0mpassed\u001b[0m \u001b[0mto\u001b[0m \u001b[0mfsspec\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mappropriate\u001b[0m \u001b[0mURLs\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msee\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0m_get_filepath_or_buffer\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    473\u001b[0m         \"\"\"\n\u001b[0;32m--> 474\u001b[0;31m         \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"openpyxl\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    475\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/compat/_optional.py\u001b[0m in \u001b[0;36mimport_optional_dependency\u001b[0;34m(name, extra, raise_on_missing, on_version)\u001b[0m\n\u001b[1;32m    124\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mon_version\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 126\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: Pandas requires version '2.6.0' or newer of 'openpyxl' (version '2.5.9' currently installed).","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8dTGv7TWeqJn","executionInfo":{"status":"ok","timestamp":1619498060819,"user_tz":-540,"elapsed":13311,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"54f36905-1d4a-44c2-c2ce-1f47c9333b47"},"source":["print(len(data))\n","print(data.head(5))\n","text = data[['review']]\n","\n","text['review'][0:10]"],"execution_count":3,"outputs":[{"output_type":"stream","text":["1087\n","         Unnamed: 0                    name_eng  ...   score mean_weighted\n","0           트롤브루 자몽       Troll Brew Grapefruit  ...   -/100          2.79\n","1           트롤브루 레몬            Troll Brew Lemon  ...   -/100          2.75\n","2           라이거 라들러                Ligre Radler  ...     NaN           NaN\n","3        크로코 리얼 프레시            Croco Real Fresh  ...     NaN           NaN\n","4  스팀 브루, 임페리얼 스타우트  Steam Brew, Imperial Stout  ...  16/100          2.77\n","\n","[5 rows x 9 columns]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0    [['500 ml can. Pours hazy orange liquid with w...\n","1    [['Can. Yellow, hazy, slightly yellowish foam....\n","2                                                  NaN\n","3                                                  NaN\n","4    [['Coffe and chocolate tstrse with some hints ...\n","5    [['Review: 0,5l can of Steam Brew Imperial IPA...\n","6    [['Dark copper colour with white head. Aroma o...\n","7                                                  NaN\n","8    [['500ml can from Karma in Sochi. Pours pale y...\n","9    [['On tap at Di Napoli - Maestri Pizzaioli, Tr...\n","Name: review, dtype: object"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xnNjyEX7zeZr","executionInfo":{"status":"ok","timestamp":1619498060819,"user_tz":-540,"elapsed":13306,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"0045b15e-2376-4b65-b516-3182f704d98b"},"source":["# Load the regular expression library\n","import re\n","\n","# Remove punctuation\n","\n","text['review'] = text['review'].map(lambda x: re.sub('[,\\'.[!?]', '', str(x)))\n","text['review']\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["0       500 ml can Pours hazy orange liquid with white...\n","1       Can Yellow hazy slightly yellowish foam Aroma:...\n","2                                                     nan\n","3                                                     nan\n","4       Coffe and chocolate tstrse with some hints of ...\n","                              ...                        \n","1082                                                  nan\n","1083                                                  nan\n","1084                                                  nan\n","1085                                                  nan\n","1086                                                  nan\n","Name: review, Length: 1087, dtype: object"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uwo3byR-fHnT","executionInfo":{"status":"ok","timestamp":1619498064168,"user_tz":-540,"elapsed":16649,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"34684801-18ae-42f5-9039-1e964b06534b"},"source":["import nltk\n","nltk.download('punkt')\n","text['review'] = text.apply(lambda row: nltk.word_tokenize(row['review']), axis=1)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GoZ5SN5s2LOD","executionInfo":{"status":"ok","timestamp":1619498064169,"user_tz":-540,"elapsed":16643,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"48d32700-a4a5-4a6d-f556-7b498aa0a349"},"source":["print(text.head(5))\n"],"execution_count":6,"outputs":[{"output_type":"stream","text":["                                              review\n","0  [500, ml, can, Pours, hazy, orange, liquid, wi...\n","1  [Can, Yellow, hazy, slightly, yellowish, foam,...\n","2                                              [nan]\n","3                                              [nan]\n","4  [Coffe, and, chocolate, tstrse, with, some, hi...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PQopnb_V4rY2","executionInfo":{"status":"ok","timestamp":1619498064527,"user_tz":-540,"elapsed":16994,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"7e289264-e702-4ba5-d61e-2467f5ec940e"},"source":["from nltk.corpus import stopwords\n","import nltk\n","nltk.download('stopwords')\n","stop = stopwords.words('english')\n","text['review'] = text['review'].apply(lambda x: [word for word in x if word not in (stop)])"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gv5EYJcXaUQS","executionInfo":{"status":"ok","timestamp":1619498064528,"user_tz":-540,"elapsed":16989,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"d844ee61-5aa8-4350-d1ad-4b091af4c07d"},"source":["stopwords.words('english')"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['i',\n"," 'me',\n"," 'my',\n"," 'myself',\n"," 'we',\n"," 'our',\n"," 'ours',\n"," 'ourselves',\n"," 'you',\n"," \"you're\",\n"," \"you've\",\n"," \"you'll\",\n"," \"you'd\",\n"," 'your',\n"," 'yours',\n"," 'yourself',\n"," 'yourselves',\n"," 'he',\n"," 'him',\n"," 'his',\n"," 'himself',\n"," 'she',\n"," \"she's\",\n"," 'her',\n"," 'hers',\n"," 'herself',\n"," 'it',\n"," \"it's\",\n"," 'its',\n"," 'itself',\n"," 'they',\n"," 'them',\n"," 'their',\n"," 'theirs',\n"," 'themselves',\n"," 'what',\n"," 'which',\n"," 'who',\n"," 'whom',\n"," 'this',\n"," 'that',\n"," \"that'll\",\n"," 'these',\n"," 'those',\n"," 'am',\n"," 'is',\n"," 'are',\n"," 'was',\n"," 'were',\n"," 'be',\n"," 'been',\n"," 'being',\n"," 'have',\n"," 'has',\n"," 'had',\n"," 'having',\n"," 'do',\n"," 'does',\n"," 'did',\n"," 'doing',\n"," 'a',\n"," 'an',\n"," 'the',\n"," 'and',\n"," 'but',\n"," 'if',\n"," 'or',\n"," 'because',\n"," 'as',\n"," 'until',\n"," 'while',\n"," 'of',\n"," 'at',\n"," 'by',\n"," 'for',\n"," 'with',\n"," 'about',\n"," 'against',\n"," 'between',\n"," 'into',\n"," 'through',\n"," 'during',\n"," 'before',\n"," 'after',\n"," 'above',\n"," 'below',\n"," 'to',\n"," 'from',\n"," 'up',\n"," 'down',\n"," 'in',\n"," 'out',\n"," 'on',\n"," 'off',\n"," 'over',\n"," 'under',\n"," 'again',\n"," 'further',\n"," 'then',\n"," 'once',\n"," 'here',\n"," 'there',\n"," 'when',\n"," 'where',\n"," 'why',\n"," 'how',\n"," 'all',\n"," 'any',\n"," 'both',\n"," 'each',\n"," 'few',\n"," 'more',\n"," 'most',\n"," 'other',\n"," 'some',\n"," 'such',\n"," 'no',\n"," 'nor',\n"," 'not',\n"," 'only',\n"," 'own',\n"," 'same',\n"," 'so',\n"," 'than',\n"," 'too',\n"," 'very',\n"," 's',\n"," 't',\n"," 'can',\n"," 'will',\n"," 'just',\n"," 'don',\n"," \"don't\",\n"," 'should',\n"," \"should've\",\n"," 'now',\n"," 'd',\n"," 'll',\n"," 'm',\n"," 'o',\n"," 're',\n"," 've',\n"," 'y',\n"," 'ain',\n"," 'aren',\n"," \"aren't\",\n"," 'couldn',\n"," \"couldn't\",\n"," 'didn',\n"," \"didn't\",\n"," 'doesn',\n"," \"doesn't\",\n"," 'hadn',\n"," \"hadn't\",\n"," 'hasn',\n"," \"hasn't\",\n"," 'haven',\n"," \"haven't\",\n"," 'isn',\n"," \"isn't\",\n"," 'ma',\n"," 'mightn',\n"," \"mightn't\",\n"," 'mustn',\n"," \"mustn't\",\n"," 'needn',\n"," \"needn't\",\n"," 'shan',\n"," \"shan't\",\n"," 'shouldn',\n"," \"shouldn't\",\n"," 'wasn',\n"," \"wasn't\",\n"," 'weren',\n"," \"weren't\",\n"," 'won',\n"," \"won't\",\n"," 'wouldn',\n"," \"wouldn't\"]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3rAgYhCk43zg","executionInfo":{"status":"ok","timestamp":1619498064528,"user_tz":-540,"elapsed":16982,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"1a402b7f-ece8-44f2-b041-2ec9ac84b880"},"source":["print(text.head(5))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["                                              review\n","0  [500, ml, Pours, hazy, orange, liquid, white, ...\n","1  [Can, Yellow, hazy, slightly, yellowish, foam,...\n","2                                              [nan]\n","3                                              [nan]\n","4  [Coffe, chocolate, tstrse, hints, bread, Too, ...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m4kMK9Ou49uT","executionInfo":{"status":"ok","timestamp":1619498067816,"user_tz":-540,"elapsed":20264,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"31f4dab4-dd08-42c9-f886-bcd448392900"},"source":["from nltk.stem import WordNetLemmatizer\n","import nltk\n","nltk.download('wordnet')\n","text['review'] = text['review'].apply(lambda x: [WordNetLemmatizer().lemmatize(word, pos='v') for word in x])\n","print(text.head(5))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet.zip.\n","                                              review\n","0  [500, ml, Pours, hazy, orange, liquid, white, ...\n","1  [Can, Yellow, hazy, slightly, yellowish, foam,...\n","2                                              [nan]\n","3                                              [nan]\n","4  [Coffe, chocolate, tstrse, hint, bread, Too, l...\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dShJmTpC5HGY","executionInfo":{"status":"ok","timestamp":1619498067817,"user_tz":-540,"elapsed":20260,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"7839d14f-aa4d-4802-82f5-6bcb24ccc0f5"},"source":["tokenized_doc = text['review'].apply(lambda x: [word for word in x if len(word) > 3])\n","print(tokenized_doc[:5])"],"execution_count":11,"outputs":[{"output_type":"stream","text":["0    [Pours, hazy, orange, liquid, white, head, Aro...\n","1    [Yellow, hazy, slightly, yellowish, foam, Arom...\n","2                                                   []\n","3                                                   []\n","4    [Coffe, chocolate, tstrse, hint, bread, light,...\n","Name: review, dtype: object\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"htC-ThzD5MtT","executionInfo":{"status":"ok","timestamp":1619498067818,"user_tz":-540,"elapsed":20255,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"38d2d263-f307-49bc-add4-ded25641bcf4"},"source":["# 역토큰화 (토큰화 작업을 되돌림)\n","detokenized_doc = []\n","for i in range(len(text)):\n","    t = ' '.join(tokenized_doc[i])\n","    detokenized_doc.append(t)\n","\n","text['review'] = detokenized_doc # 다시 text['headline_text']에 재저장"],"execution_count":12,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  import sys\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tM4mvbOu5Wy8","executionInfo":{"status":"ok","timestamp":1619498067820,"user_tz":-540,"elapsed":20251,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"26ae3f37-642a-4ff8-8e48-93a8dedc8233"},"source":["text['review'][:5]"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    Pours hazy orange liquid white head Aroma grap...\n","1    Yellow hazy slightly yellowish foam Aroma lemo...\n","2                                                     \n","3                                                     \n","4    Coffe chocolate tstrse hint bread light stout ...\n","Name: review, dtype: object"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h2XReT4l5dS0","executionInfo":{"status":"ok","timestamp":1619498068174,"user_tz":-540,"elapsed":20598,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"e887e611-6935-4d5b-98a0-732905613dd8"},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","vectorizer = TfidfVectorizer(stop_words='english', \n","max_features= 1000) # 상위 1,000개의 단어를 보존 \n","X = vectorizer.fit_transform(text['review'])\n","X.shape # TF-IDF 행렬의 크기 확인"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1087, 1000)"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"OewI1QQA5-RN"},"source":["토픽 모델링\n"]},{"cell_type":"markdown","metadata":{"id":"Z7cRJPK-SPkO"},"source":["이 아래 LDA를 import tomotopy as tp 에서 \n","model = tp.LDAModel(k=20, alpha=0.1, eta=0.01, min_cf=5)로 변경해보면?"]},{"cell_type":"code","metadata":{"id":"9jVFfW8s6AXd","executionInfo":{"status":"ok","timestamp":1619498068175,"user_tz":-540,"elapsed":20592,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}}},"source":["from sklearn.decomposition import LatentDirichletAllocation\n","lda_model=LatentDirichletAllocation(n_components=10,learning_method='online',random_state=777,max_iter=1)"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"XbGTMDsh6H04","executionInfo":{"status":"ok","timestamp":1619498068432,"user_tz":-540,"elapsed":20845,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}}},"source":["lda_top=lda_model.fit_transform(X)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g2NJBb6l6IVN","executionInfo":{"status":"ok","timestamp":1619498068433,"user_tz":-540,"elapsed":20842,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"4854389a-f70d-4900-e3d6-0c1073db62c7"},"source":["print(lda_model.components_)\n","print(lda_model.components_.shape) "],"execution_count":17,"outputs":[{"output_type":"stream","text":["[[0.35744628 0.3141075  0.32160989 ... 0.68886859 0.5361317  0.39167241]\n"," [0.2615247  0.2919101  0.29050204 ... 0.36022344 0.31337668 0.30646344]\n"," [0.28912896 0.35503856 0.29432671 ... 0.30709122 0.33588037 0.29288779]\n"," ...\n"," [0.32974664 0.3262626  0.30084615 ... 0.46548162 0.30959001 0.28347851]\n"," [0.85272456 0.87452283 0.94236004 ... 1.69022669 1.4696378  0.96718746]\n"," [0.28468762 0.33227175 0.3112221  ... 0.31860825 0.32288795 0.27735078]]\n","(10, 1000)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D-ohJWeV6M5T","executionInfo":{"status":"ok","timestamp":1619498068434,"user_tz":-540,"elapsed":20837,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"b5218365-2da5-42c8-bcff-35163f926369"},"source":["terms = vectorizer.get_feature_names() # 단어 집합. 1,000개의 단어가 저장됨.\n","\n","def get_topics(components, feature_names, n=5):\n","    for idx, topic in enumerate(components):\n","        print(\"Topic %d:\" % (idx+1), [(feature_names[i], topic[i].round(2)) for i in topic.argsort()[:-n - 1:-1]])\n","get_topics(lda_model.components_,terms)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Topic 1: [('head', 5.06), ('aroma', 4.5), ('white', 4.38), ('light', 4.31), ('citrus', 4.12)]\n","Topic 2: [('head', 1.01), ('light', 0.98), ('white', 0.91), ('taste', 0.86), ('aroma', 0.81)]\n","Topic 3: [('chocolate', 0.59), ('head', 0.53), ('aroma', 0.52), ('taste', 0.5), ('sour', 0.49)]\n","Topic 4: [('head', 0.81), ('aroma', 0.75), ('malt', 0.71), ('fruit', 0.64), ('dark', 0.62)]\n","Topic 5: [('head', 1.0), ('aroma', 0.99), ('fruit', 0.9), ('malt', 0.9), ('light', 0.87)]\n","Topic 6: [('aroma', 1.01), ('head', 1.0), ('malt', 0.9), ('white', 0.87), ('taste', 0.82)]\n","Topic 7: [('head', 1.18), ('aroma', 1.17), ('medium', 1.05), ('malt', 1.02), ('white', 1.02)]\n","Topic 8: [('aroma', 0.77), ('head', 0.76), ('malt', 0.71), ('taste', 0.69), ('white', 0.69)]\n","Topic 9: [('head', 28.4), ('aroma', 24.93), ('taste', 22.08), ('sweet', 21.41), ('medium', 20.59)]\n","Topic 10: [('chocolate', 7.56), ('coffee', 6.68), ('roast', 5.19), ('black', 5.11), ('dark', 3.93)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":989},"id":"BiPQOQ837xON","executionInfo":{"status":"ok","timestamp":1619498095474,"user_tz":-540,"elapsed":47869,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"7226bd06-0576-4e6f-8b61-bf28bb3ae1d3"},"source":["pip install pyLDAvis"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Collecting pyLDAvis\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/03/a5/15a0da6b0150b8b68610cc78af80364a80a9a4c8b6dd5ee549b8989d4b60/pyLDAvis-3.3.1.tar.gz (1.7MB)\n","\u001b[K     |████████████████████████████████| 1.7MB 4.3MB/s \n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (2.11.3)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.16.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.22.2.post1)\n","Collecting funcy\n","  Downloading https://files.pythonhosted.org/packages/66/89/479de0afbbfb98d1c4b887936808764627300208bb771fcd823403645a36/funcy-1.15-py2.py3-none-any.whl\n","Collecting numpy>=1.20.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/73/ef/8967d406f3f85018ceb5efab50431e901683188f1741ceb053efcab26c87/numpy-1.20.2-cp37-cp37m-manylinux2010_x86_64.whl (15.3MB)\n","\u001b[K     |████████████████████████████████| 15.3MB 312kB/s \n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.0.1)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (2.7.3)\n","Collecting pandas>=1.2.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/51/51/48f3fc47c4e2144da2806dfb6629c4dd1fa3d5a143f9652b141e979a8ca9/pandas-1.2.4-cp37-cp37m-manylinux1_x86_64.whl (9.9MB)\n","\u001b[K     |████████████████████████████████| 9.9MB 41.0MB/s \n","\u001b[?25hRequirement already satisfied: gensim in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (3.6.0)\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (56.0.0)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->pyLDAvis) (1.1.1)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.2.0->pyLDAvis) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.2.0->pyLDAvis) (2.8.1)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim->pyLDAvis) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim->pyLDAvis) (5.0.0)\n","Building wheels for collected packages: pyLDAvis\n","  Building wheel for pyLDAvis (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyLDAvis: filename=pyLDAvis-3.3.1-cp37-none-any.whl size=136870 sha256=05e83ae435958312f278a1c9ff2a7ad691d1e51bf567f1167d1cd17ac8975a17\n","  Stored in directory: /root/.cache/pip/wheels/a0/9c/fc/c6e00689d35c82cf96a8adc70edfe7ba7904374fdac3240ac2\n","Successfully built pyLDAvis\n","\u001b[31mERROR: tensorflow 2.4.1 has requirement numpy~=1.19.2, but you'll have numpy 1.20.2 which is incompatible.\u001b[0m\n","\u001b[31mERROR: google-colab 1.0.0 has requirement pandas~=1.1.0; python_version >= \"3.0\", but you'll have pandas 1.2.4 which is incompatible.\u001b[0m\n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","Installing collected packages: funcy, numpy, pandas, pyLDAvis\n","  Found existing installation: numpy 1.19.5\n","    Uninstalling numpy-1.19.5:\n","      Successfully uninstalled numpy-1.19.5\n","  Found existing installation: pandas 1.1.5\n","    Uninstalling pandas-1.1.5:\n","      Successfully uninstalled pandas-1.1.5\n","Successfully installed funcy-1.15 numpy-1.20.2 pandas-1.2.4 pyLDAvis-3.3.1\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy","pandas"]}}},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R91QVDWpBpbd","executionInfo":{"status":"ok","timestamp":1619498095475,"user_tz":-540,"elapsed":47864,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"1749ce2a-9661-41fb-ef88-d26449502b04"},"source":["tokenized_doc[:5]"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    [Pours, hazy, orange, liquid, white, head, Aro...\n","1    [Yellow, hazy, slightly, yellowish, foam, Arom...\n","2                                                   []\n","3                                                   []\n","4    [Coffe, chocolate, tstrse, hint, bread, light,...\n","Name: review, dtype: object"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fuT3LMrtCGF1","executionInfo":{"status":"ok","timestamp":1619498096152,"user_tz":-540,"elapsed":48534,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"9f0aed20-bd92-4217-d7a2-91b284082593"},"source":["from gensim import corpora\n","dictionary = corpora.Dictionary(tokenized_doc)\n","corpus = [dictionary.doc2bow(text) for text in tokenized_doc]\n","print(corpus[1])"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[(1, 1), (7, 1), (10, 2), (12, 1), (17, 1), (18, 1), (20, 1), (21, 1), (32, 2), (37, 3), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 2), (51, 1), (52, 1), (53, 1), (54, 1), (55, 3), (56, 2), (57, 1), (58, 3), (59, 1), (60, 1), (61, 1), (62, 1), (63, 2), (64, 1), (65, 1), (66, 1)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTDqqmWoCSIe","executionInfo":{"status":"ok","timestamp":1619498096154,"user_tz":-540,"elapsed":48531,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"d0d396f1-2f3f-47a0-c343-8d1b3e24ab5c"},"source":["print(dictionary[66])"],"execution_count":22,"outputs":[{"output_type":"stream","text":["zest\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uq6j8GEeCU0v","executionInfo":{"status":"ok","timestamp":1619498096156,"user_tz":-540,"elapsed":48527,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"aa35b820-0e40-483c-ceb4-ecfdf0a0798a"},"source":["len(dictionary)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9277"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pScpRR0DCXt3","executionInfo":{"status":"ok","timestamp":1619498114479,"user_tz":-540,"elapsed":66844,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"c071a7a2-ac1e-494c-be12-ae0024347ab6"},"source":["import gensim\n","NUM_TOPICS = 20 #20개의 토픽, k=20\n","ldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics = NUM_TOPICS, id2word=dictionary, passes=15)\n","topics = ldamodel.print_topics(num_words=4)\n","for topic in topics:\n","    print(topic)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["(0, '0.019*\"head\" + 0.015*\"malt\" + 0.013*\"white\" + 0.013*\"bitter\"')\n","(1, '0.014*\"head\" + 0.012*\"beer\" + 0.011*\"bottle\" + 0.010*\"body\"')\n","(2, '0.000*\"head\" + 0.000*\"sweet\" + 0.000*\"yeast\" + 0.000*\"malt\"')\n","(3, '0.011*\"trappist\" + 0.009*\"grapefruit\" + 0.007*\"pith\" + 0.007*\"peel/rind\"')\n","(4, '0.019*\"light\" + 0.012*\"wheat\" + 0.010*\"taste\" + 0.010*\"spice\"')\n","(5, '0.017*\"strong\" + 0.017*\"coffee\" + 0.011*\"lemon\" + 0.010*\"curry\"')\n","(6, '0.024*\"malt\" + 0.021*\"head\" + 0.020*\"caramel\" + 0.014*\"brown\"')\n","(7, '0.038*\"pumpkin\" + 0.026*\"spice\" + 0.011*\"head\" + 0.011*\"note\"')\n","(8, '0.000*\"head\" + 0.000*\"light\" + 0.000*\"white\" + 0.000*\"note\"')\n","(9, '0.003*\"chill\" + 0.003*\"already\" + 0.003*\"party\" + 0.002*\"Lees\"')\n","(10, '0.025*\"head\" + 0.020*\"white\" + 0.015*\"citrus\" + 0.014*\"body\"')\n","(11, '0.046*\"raspberry\" + 0.030*\"raspberries\" + 0.012*\"complexity\" + 0.011*\"earthiness\"')\n","(12, '0.020*\"head\" + 0.016*\"white\" + 0.013*\"sweet\" + 0.013*\"beer\"')\n","(13, '0.000*\"head\" + 0.000*\"malt\" + 0.000*\"light\" + 0.000*\"taste\"')\n","(14, '0.044*\"sour\" + 0.023*\"cherry\" + 0.021*\"tart\" + 0.020*\"head\"')\n","(15, '0.020*\"head\" + 0.013*\"white\" + 0.011*\"sweet\" + 0.011*\"medium\"')\n","(16, '0.034*\"chocolate\" + 0.031*\"coffee\" + 0.025*\"roast\" + 0.023*\"head\"')\n","(17, '0.004*\"2020\" + 0.002*\"apple\" + 0.002*\"floral\" + 0.002*\"fruity\"')\n","(18, '0.030*\"chocolate\" + 0.019*\"sweet\" + 0.018*\"head\" + 0.017*\"dark\"')\n","(19, '0.012*\"whisky\" + 0.010*\"berry\" + 0.009*\"smoke\" + 0.007*\"peat\"')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J5eU-ni0ChGe","executionInfo":{"status":"ok","timestamp":1619498114482,"user_tz":-540,"elapsed":66842,"user":{"displayName":"jiheon Kim","photoUrl":"https://lh5.googleusercontent.com/-Z0aWZ1c8trA/AAAAAAAAAAI/AAAAAAAAABI/ZcfQ4mlzCFs/s64/photo.jpg","userId":"14698984272819109574"}},"outputId":"6d1e724a-f48e-4ce6-bdfa-d489bcc58961"},"source":["print(ldamodel.print_topics())"],"execution_count":25,"outputs":[{"output_type":"stream","text":["[(0, '0.019*\"head\" + 0.015*\"malt\" + 0.013*\"white\" + 0.013*\"bitter\" + 0.012*\"taste\" + 0.012*\"beer\" + 0.011*\"body\" + 0.011*\"fruit\" + 0.010*\"finish\" + 0.009*\"aroma\"'), (1, '0.014*\"head\" + 0.012*\"beer\" + 0.011*\"bottle\" + 0.010*\"body\" + 0.009*\"taste\" + 0.008*\"yeast\" + 0.007*\"finish\" + 0.007*\"sweet\" + 0.007*\"bite\" + 0.007*\"banana\"'), (2, '0.000*\"head\" + 0.000*\"sweet\" + 0.000*\"yeast\" + 0.000*\"malt\" + 0.000*\"Taste\" + 0.000*\"Aroma\" + 0.000*\"body\" + 0.000*\"light\" + 0.000*\"dark\" + 0.000*\"caramel\"'), (3, '0.011*\"trappist\" + 0.009*\"grapefruit\" + 0.007*\"pith\" + 0.007*\"peel/rind\" + 0.006*\"American\" + 0.005*\"citrus/fruity/tropical/earthy\" + 0.005*\"herbal/floral/grassy\" + 0.005*\"dark/bready\" + 0.005*\"peppercorn\" + 0.005*\"Spencer\"'), (4, '0.019*\"light\" + 0.012*\"wheat\" + 0.010*\"taste\" + 0.010*\"spice\" + 0.008*\"banana\" + 0.007*\"grass\" + 0.006*\"peel\" + 0.005*\"honey\" + 0.005*\"wheaty\" + 0.005*\"lemon\"'), (5, '0.017*\"strong\" + 0.017*\"coffee\" + 0.011*\"lemon\" + 0.010*\"curry\" + 0.009*\"head\" + 0.007*\"spice\" + 0.007*\"lime\" + 0.007*\"cumin\" + 0.006*\"Aroma\" + 0.006*\"bite\"'), (6, '0.024*\"malt\" + 0.021*\"head\" + 0.020*\"caramel\" + 0.014*\"brown\" + 0.014*\"dark\" + 0.014*\"body\" + 0.014*\"fruit\" + 0.013*\"sweet\" + 0.012*\"light\" + 0.011*\"Aroma\"'), (7, '0.038*\"pumpkin\" + 0.026*\"spice\" + 0.011*\"head\" + 0.011*\"note\" + 0.009*\"light\" + 0.008*\"sweet\" + 0.007*\"Bottle\" + 0.007*\"flavor\" + 0.007*\"taste\" + 0.007*\"Aroma\"'), (8, '0.000*\"head\" + 0.000*\"light\" + 0.000*\"white\" + 0.000*\"note\" + 0.000*\"body\" + 0.000*\"Taste\" + 0.000*\"Aroma\" + 0.000*\"Pours\" + 0.000*\"sweet\" + 0.000*\"medium\"'), (9, '0.003*\"chill\" + 0.003*\"already\" + 0.003*\"party\" + 0.002*\"Lees\" + 0.002*\"Westmalle\" + 0.002*\"Rib-eye\" + 0.002*\"amber/mahogany\" + 0.002*\"argue\" + 0.002*\"holden\" + 0.002*\"Noice\"'), (10, '0.025*\"head\" + 0.020*\"white\" + 0.015*\"citrus\" + 0.014*\"body\" + 0.014*\"light\" + 0.012*\"malt\" + 0.012*\"finish\" + 0.011*\"Aroma\" + 0.011*\"sweet\" + 0.011*\"fruit\"'), (11, '0.046*\"raspberry\" + 0.030*\"raspberries\" + 0.012*\"complexity\" + 0.011*\"earthiness\" + 0.008*\"robustness\" + 0.007*\"date\" + 0.007*\"skin/seeds\" + 0.007*\"light-moderate\" + 0.007*\"dryness\" + 0.006*\"increase\"'), (12, '0.020*\"head\" + 0.016*\"white\" + 0.013*\"sweet\" + 0.013*\"beer\" + 0.010*\"banana\" + 0.010*\"Aroma\" + 0.009*\"yeast\" + 0.009*\"note\" + 0.009*\"malt\" + 0.009*\"golden\"'), (13, '0.000*\"head\" + 0.000*\"malt\" + 0.000*\"light\" + 0.000*\"taste\" + 0.000*\"aroma\" + 0.000*\"body\" + 0.000*\"finish\" + 0.000*\"sweet\" + 0.000*\"beer\" + 0.000*\"note\"'), (14, '0.044*\"sour\" + 0.023*\"cherry\" + 0.021*\"tart\" + 0.020*\"head\" + 0.018*\"cherries\" + 0.017*\"sweet\" + 0.013*\"body\" + 0.012*\"berry\" + 0.012*\"carbonation\" + 0.011*\"vinegar\"'), (15, '0.020*\"head\" + 0.013*\"white\" + 0.011*\"sweet\" + 0.011*\"medium\" + 0.010*\"malt\" + 0.010*\"bitter\" + 0.010*\"beer\" + 0.009*\"citrus\" + 0.009*\"pine\" + 0.008*\"taste\"'), (16, '0.034*\"chocolate\" + 0.031*\"coffee\" + 0.025*\"roast\" + 0.023*\"head\" + 0.021*\"malt\" + 0.020*\"dark\" + 0.018*\"black\" + 0.014*\"vanilla\" + 0.013*\"brown\" + 0.013*\"body\"'), (17, '0.004*\"2020\" + 0.002*\"apple\" + 0.002*\"floral\" + 0.002*\"fruity\" + 0.002*\"Bruges\" + 0.002*\"Eduard\" + 0.002*\"Kombucha\" + 0.002*\"Sunday\" + 0.002*\"Maarten\" + 0.002*\"Cafe\"'), (18, '0.030*\"chocolate\" + 0.019*\"sweet\" + 0.018*\"head\" + 0.017*\"dark\" + 0.016*\"bourbon\" + 0.016*\"body\" + 0.015*\"malt\" + 0.014*\"vanilla\" + 0.012*\"coffee\" + 0.011*\"black\"'), (19, '0.012*\"whisky\" + 0.010*\"berry\" + 0.009*\"smoke\" + 0.007*\"peat\" + 0.006*\"carbonation\" + 0.006*\"fruit\" + 0.005*\"blackberry\" + 0.005*\"tangy\" + 0.005*\"peated\" + 0.004*\"juice\"')]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"28y2gGPcCpJU","outputId":"d9f1b130-1ad9-4c79-afff-cbdbc7c55c0c"},"source":["! pip install pyLDAvis\n","! pip install --upgrade pandas"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pyLDAvis in /usr/local/lib/python3.7/dist-packages (3.3.1)\n","Requirement already satisfied: numpy>=1.20.0 in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.20.2)\n","Requirement already satisfied: gensim in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (3.6.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (2.11.3)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.22.2.post1)\n","Requirement already satisfied: pandas>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.2.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (56.0.0)\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.0)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.16.0)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (2.7.3)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.0.1)\n","Requirement already satisfied: funcy in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.15)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.4.1)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim->pyLDAvis) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim->pyLDAvis) (5.0.0)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->pyLDAvis) (1.1.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.2.0->pyLDAvis) (2.8.1)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.2.0->pyLDAvis) (2018.9)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vC7NvbHVGzwa"},"source":["import pyLDAvis\n","import pyLDAvis.gensim_models as gensimvis\n","pyLDAvis.enable_notebook()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MeE6XNRshE3T"},"source":["! pip install --upgrade pandas"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xLLo9vzsG14G"},"source":["\n","vis = gensimvis.prepare(ldamodel, corpus, dictionary)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U6NEq36_iryX"},"source":["pd.show_versions(as_json=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BU23cnFuhYwN"},"source":["from pandas.compat._optional import import_optional_dependency\n","     \n","ne = import_optional_dependency(\"numexpr\", raise_on_missing=False, on_version=\"warn\")\n","NUMEXPR_INSTALLED = ne is not None\n","if NUMEXPR_INSTALLED:\n","    NUMEXPR_VERSION = ne.__version__\n","else:\n","    NUMEXPR_VERSION = None\n","     \n","__all__ = [\"NUMEXPR_INSTALLED\", \"NUMEXPR_VERSION\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"w6u7AnNGG2yb"},"source":["pyLDAvis.display(vis)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lN5qT5mKlqYW"},"source":["pip install pandas==1.2.4"],"execution_count":null,"outputs":[]}]}